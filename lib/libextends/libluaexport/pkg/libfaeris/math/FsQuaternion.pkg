$#include "math/FsQuaternion.h"

class Quaternion 
{
	public:
		float x;
		float y;
		float z;
		float w;

	public:
		Quaternion(float qx,float qy,float qz,float qw);
		Quaternion(float qx,float qy,float qz);
		Quaternion();

		/* set Quaternion from different way */
		void set(float qx,float qy,float qz,float qw);

		/* aux function for quick make Quaternion */
		void makeFromEuler(const Vector3& v,E_EulerOrientType order);
		void makeFromAxisAngle(const Vector3& v,float angle);
		void makeFromRotationMatrix(const Matrix4& m);

		/* normalize function */
		void calcuateW();
		float length()const;
		void normalize();
		void inverse();
		void getInverse(Quaternion* q)const;

		/* transform function */
		void multiply(const Quaternion& a,const Quaternion& b);
		Vector3 multiplyVector3(const Vector3& v) const;

		/* slerp */
		void slerp(const Quaternion& qa,const Quaternion& qb,float t);
};

